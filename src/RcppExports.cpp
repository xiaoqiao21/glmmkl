// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// logidual
List logidual(arma::vec y0, arma::cube k0, arma::vec rho, double cc, double lambda, int maxiter, double cri, unsigned crho0);
RcppExport SEXP _glmmkl_logidual(SEXP y0SEXP, SEXP k0SEXP, SEXP rhoSEXP, SEXP ccSEXP, SEXP lambdaSEXP, SEXP maxiterSEXP, SEXP criSEXP, SEXP crho0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type cri(criSEXP);
    Rcpp::traits::input_parameter< unsigned >::type crho0(crho0SEXP);
    rcpp_result_gen = Rcpp::wrap(logidual(y0, k0, rho, cc, lambda, maxiter, cri, crho0));
    return rcpp_result_gen;
END_RCPP
}
// lrdual
List lrdual(arma::vec y0, arma::cube k0, arma::vec rho, double cc, double lambda, int maxiter, double cri, unsigned crho0);
RcppExport SEXP _glmmkl_lrdual(SEXP y0SEXP, SEXP k0SEXP, SEXP rhoSEXP, SEXP ccSEXP, SEXP lambdaSEXP, SEXP maxiterSEXP, SEXP criSEXP, SEXP crho0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type cri(criSEXP);
    Rcpp::traits::input_parameter< unsigned >::type crho0(crho0SEXP);
    rcpp_result_gen = Rcpp::wrap(lrdual(y0, k0, rho, cc, lambda, maxiter, cri, crho0));
    return rcpp_result_gen;
END_RCPP
}
// predictspicy
arma::vec predictspicy(arma::mat alpha, double b, arma::cube k0);
RcppExport SEXP _glmmkl_predictspicy(SEXP alphaSEXP, SEXP bSEXP, SEXP k0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type k0(k0SEXP);
    rcpp_result_gen = Rcpp::wrap(predictspicy(alpha, b, k0));
    return rcpp_result_gen;
END_RCPP
}
// mixkercd
arma::cube mixkercd(arma::mat xc, arma::mat xd);
RcppExport SEXP _glmmkl_mixkercd(SEXP xcSEXP, SEXP xdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xc(xcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xd(xdSEXP);
    rcpp_result_gen = Rcpp::wrap(mixkercd(xc, xd));
    return rcpp_result_gen;
END_RCPP
}
// mixkertestcd
arma::cube mixkertestcd(arma::mat trc, arma::mat trd, arma::mat tec, arma::mat ted);
RcppExport SEXP _glmmkl_mixkertestcd(SEXP trcSEXP, SEXP trdSEXP, SEXP tecSEXP, SEXP tedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type trc(trcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type trd(trdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tec(tecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ted(tedSEXP);
    rcpp_result_gen = Rcpp::wrap(mixkertestcd(trc, trd, tec, ted));
    return rcpp_result_gen;
END_RCPP
}
// mixkerc
arma::cube mixkerc(arma::mat xc);
RcppExport SEXP _glmmkl_mixkerc(SEXP xcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xc(xcSEXP);
    rcpp_result_gen = Rcpp::wrap(mixkerc(xc));
    return rcpp_result_gen;
END_RCPP
}
// mixkertestc
arma::cube mixkertestc(arma::mat trc, arma::mat tec);
RcppExport SEXP _glmmkl_mixkertestc(SEXP trcSEXP, SEXP tecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type trc(trcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tec(tecSEXP);
    rcpp_result_gen = Rcpp::wrap(mixkertestc(trc, tec));
    return rcpp_result_gen;
END_RCPP
}
// mixkerd
arma::cube mixkerd(arma::mat xd);
RcppExport SEXP _glmmkl_mixkerd(SEXP xdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xd(xdSEXP);
    rcpp_result_gen = Rcpp::wrap(mixkerd(xd));
    return rcpp_result_gen;
END_RCPP
}
// mixkertestd
arma::cube mixkertestd(arma::mat trd, arma::mat ted);
RcppExport SEXP _glmmkl_mixkertestd(SEXP trdSEXP, SEXP tedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type trd(trdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ted(tedSEXP);
    rcpp_result_gen = Rcpp::wrap(mixkertestd(trd, ted));
    return rcpp_result_gen;
END_RCPP
}
// cvlr
arma::mat cvlr(const arma::vec& yy, const arma::mat& xx, const arma::vec& ccsearch, const arma::vec& lamsearch, const arma::uvec& incd, const arma::uvec& cvwhich, int nf, int maxiter, double cri, unsigned crho0);
RcppExport SEXP _glmmkl_cvlr(SEXP yySEXP, SEXP xxSEXP, SEXP ccsearchSEXP, SEXP lamsearchSEXP, SEXP incdSEXP, SEXP cvwhichSEXP, SEXP nfSEXP, SEXP maxiterSEXP, SEXP criSEXP, SEXP crho0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ccsearch(ccsearchSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lamsearch(lamsearchSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type incd(incdSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cvwhich(cvwhichSEXP);
    Rcpp::traits::input_parameter< int >::type nf(nfSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type cri(criSEXP);
    Rcpp::traits::input_parameter< unsigned >::type crho0(crho0SEXP);
    rcpp_result_gen = Rcpp::wrap(cvlr(yy, xx, ccsearch, lamsearch, incd, cvwhich, nf, maxiter, cri, crho0));
    return rcpp_result_gen;
END_RCPP
}
// cvlogi
arma::mat cvlogi(const arma::vec& yy, const arma::mat& xx, arma::vec ccsearch, arma::vec lamsearch, const arma::uvec& incd, const arma::uvec& cvwhich, int nf, int maxiter, double cri, unsigned crho0);
RcppExport SEXP _glmmkl_cvlogi(SEXP yySEXP, SEXP xxSEXP, SEXP ccsearchSEXP, SEXP lamsearchSEXP, SEXP incdSEXP, SEXP cvwhichSEXP, SEXP nfSEXP, SEXP maxiterSEXP, SEXP criSEXP, SEXP crho0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ccsearch(ccsearchSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lamsearch(lamsearchSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type incd(incdSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cvwhich(cvwhichSEXP);
    Rcpp::traits::input_parameter< int >::type nf(nfSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type cri(criSEXP);
    Rcpp::traits::input_parameter< unsigned >::type crho0(crho0SEXP);
    rcpp_result_gen = Rcpp::wrap(cvlogi(yy, xx, ccsearch, lamsearch, incd, cvwhich, nf, maxiter, cri, crho0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glmmkl_logidual", (DL_FUNC) &_glmmkl_logidual, 8},
    {"_glmmkl_lrdual", (DL_FUNC) &_glmmkl_lrdual, 8},
    {"_glmmkl_predictspicy", (DL_FUNC) &_glmmkl_predictspicy, 3},
    {"_glmmkl_mixkercd", (DL_FUNC) &_glmmkl_mixkercd, 2},
    {"_glmmkl_mixkertestcd", (DL_FUNC) &_glmmkl_mixkertestcd, 4},
    {"_glmmkl_mixkerc", (DL_FUNC) &_glmmkl_mixkerc, 1},
    {"_glmmkl_mixkertestc", (DL_FUNC) &_glmmkl_mixkertestc, 2},
    {"_glmmkl_mixkerd", (DL_FUNC) &_glmmkl_mixkerd, 1},
    {"_glmmkl_mixkertestd", (DL_FUNC) &_glmmkl_mixkertestd, 2},
    {"_glmmkl_cvlr", (DL_FUNC) &_glmmkl_cvlr, 10},
    {"_glmmkl_cvlogi", (DL_FUNC) &_glmmkl_cvlogi, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_glmmkl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
